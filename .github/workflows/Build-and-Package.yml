name: Build and Package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Debug, Release]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Setup Conan
      uses: jwidauer/setup-conan@v1
      with:
        version: 2.1.*

    - name: Get Conan cache location
      if: runner.os == 'Windows'
      id: conan-cache-location
      run: |
        $cacheLocation = conan config home | Out-String
        Write-Host "::set-output name=cache-location::$cacheLocation"
        
    - name: Cache Conan packages
      id: cache-conan
      uses: actions/cache@v3
      with:
        path: ${{ steps.conan-cache-location.outputs.cache-location }}
        key: ${{ matrix.os }}-${{ matrix.build_type }}-conan-${{ hashFiles('Source/Projects.py') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.build_type }}-conan-

    - name: Setup Python
      uses: actions/setup-python@v5.1.0
      with:
        python-version: '>=3.11 <=3.12'
        cache: 'pip'

    - name: get-cmake
      uses: lukka/get-cmake@v3.29.3
      with:
        cmakeVersion: "^3.25.0"

    - name: Conan Profile Detect
      run: conan profile detect --force

    - name: Setup.py (${{ matrix.build_type }})
      run: python Setup.py -c ${{ matrix.build_type }}

    - name: Setup MSBuild
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1

    - name: Build Source.sln (${{ matrix.build_type }})
      if: runner.os == 'Windows'
      run: |
        msbuild Generated/CMake_${{ matrix.build_type }}/Source.sln /p:Configuration=${{ matrix.build_type }} /p:Platform="x64"
      env:
        SolutionPath: Generated/CMake_${{ matrix.build_type }}/Source.sln
        Configuration: ${{ matrix.build_type }}

    - name: Save build artifacts
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ matrix.build_type }}
        path: Generated/CMake_${{ matrix.build_type }}

  package:
    if: github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Debug, Release]
    needs: build
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts-${{ matrix.build_type }}  # Change this if you want to package Debug artifacts as well
        path: Generated/CMake_${{ matrix.build_type }}

    - name: Setup Python
      uses: actions/setup-python@v5.1.0
      with:
        python-version: 3.*

    - name: Pip install
      run: |
        &pip install -r DevEnvironment/pip-requirements.txt

    - name: Package.py (${{ matrix.build_type }})
      run: |
        &python Package.py -c ${{ matrix.build_type }}
        
    - name: Create archives
      run: |
        $basePath = "Generated/Packages"
        $projects = Get-ChildItem -Path $basePath -Directory
        foreach ($project in $projects) {
            $projName = $project.Name
            $packagePath = Join-Path -Path $basePath -ChildPath $projName ${{ matrix.build_type }}
            $outputPath = "$projName.${{ matrix.build_type }}.zip"
            Compress-Archive -Path "$packagePath/*" -DestinationPath $outputPath
            Write-Host "Packaged $packagePath into $outputPath"
        }

    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: '*.zip'
